{"ast":null,"code":"import _objectSpread from \"/home/runner/work/Geo-Expert/Geo-Expert/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncGeneratorDelegate from \"/home/runner/work/Geo-Expert/Geo-Expert/frontend/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _awaitAsyncGenerator from \"/home/runner/work/Geo-Expert/Geo-Expert/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/home/runner/work/Geo-Expert/Geo-Expert/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/home/runner/work/Geo-Expert/Geo-Expert/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { useCallback as A, useRef as S, useEffect as G } from \"react\";\nimport { useOnRcbEvent as P, RcbEvent as T, useFlow as L, useAudio as z, useMessages as K, usePaths as N, useTextArea as J, useChatWindow as H } from \"react-chatbotify\";\nconst Y = {\n    autoConfig: !0\n  },\n  V = (i, e) => {\n    const t = A(s => {\n      const o = i()[s.data.nextPath];\n      e(o);\n    }, [i, e]);\n    P(T.CHANGE_PATH, t);\n  },\n  q = (i, e) => {\n    const {\n        outputTypeRef: t\n      } = i,\n      {\n        toggleTextAreaDisabled: s,\n        toggleIsBotTyping: n,\n        focusTextArea: o,\n        injectMessage: r,\n        simulateStreamMessage: a,\n        getIsChatBotVisible: c\n      } = e,\n      l = A(d => {\n        var p;\n        const h = d.data.block;\n        h.llmConnector && (d.preventDefault(), d.type === \"rcb-pre-process-block\" && ((p = h.llmConnector) != null && p.initialMessage && (t.current === \"full\" ? r(i.initialMessageRef.current) : a(i.initialMessageRef.current)), n(!1), s(!1), setTimeout(() => {\n          c() && o();\n        })));\n      }, [n, s, o, c]);\n    P(T.PRE_PROCESS_BLOCK, l), P(T.POST_PROCESS_BLOCK, l);\n  },\n  Q = /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator(function* (i, e) {\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(i), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const t = _step.value;\n          {\n            for (const s of t) yield s, yield _awaitAsyncGenerator(new Promise(n => setTimeout(n, e)));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return function Q(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n  X = /*#__PURE__*/function () {\n    var _ref2 = _wrapAsyncGenerator(function* (i, e) {\n      var _iteratorAbruptCompletion2 = false;\n      var _didIteratorError2 = false;\n      var _iteratorError2;\n      try {\n        for (var _iterator2 = _asyncIterator(i), _step2; _iteratorAbruptCompletion2 = !(_step2 = yield _awaitAsyncGenerator(_iterator2.next())).done; _iteratorAbruptCompletion2 = false) {\n          const t = _step2.value;\n          {\n            yield t, yield _awaitAsyncGenerator(new Promise(s => setTimeout(s, e)));\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n            yield _awaitAsyncGenerator(_iterator2.return());\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    });\n    return function X(_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }(),\n  Z = /*#__PURE__*/function () {\n    var _ref3 = _wrapAsyncGenerator(function* (i, e, t) {\n      e === \"character\" ? yield* _asyncGeneratorDelegate(_asyncIterator(Q(i, t)), _awaitAsyncGenerator) : yield* _asyncGeneratorDelegate(_asyncIterator(X(i, t)), _awaitAsyncGenerator);\n    });\n    return function Z(_x5, _x6, _x7) {\n      return _ref3.apply(this, arguments);\n    };\n  }(),\n  ee = /*#__PURE__*/function () {\n    var _ref4 = _wrapAsyncGenerator(function* (i, e) {\n      var _iteratorAbruptCompletion3 = false;\n      var _didIteratorError3 = false;\n      var _iteratorError3;\n      try {\n        for (var _iterator3 = _asyncIterator(i), _step3; _iteratorAbruptCompletion3 = !(_step3 = yield _awaitAsyncGenerator(_iterator3.next())).done; _iteratorAbruptCompletion3 = false) {\n          const t = _step3.value;\n          {\n            e(t), yield t;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n            yield _awaitAsyncGenerator(_iterator3.return());\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    });\n    return function ee(_x8, _x9) {\n      return _ref4.apply(this, arguments);\n    };\n  }(),\n  te = async function (i, e, t) {\n    let s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var M, y;\n    if (!e.providerRef.current) return;\n    const {\n        speakAudio: n,\n        toggleIsBotTyping: o,\n        toggleTextAreaDisabled: r,\n        focusTextArea: a,\n        injectMessage: c,\n        streamMessage: l,\n        endStreamMessage: d,\n        getIsChatBotVisible: h\n      } = t,\n      p = e.providerRef.current.sendMessages(i),\n      f = e.outputTypeRef.current,\n      g = e.outputSpeedRef.current;\n    if (f === \"full\") {\n      let u = \"\";\n      var _iteratorAbruptCompletion4 = false;\n      var _didIteratorError4 = false;\n      var _iteratorError4;\n      try {\n        for (var _iterator4 = _asyncIterator(p), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n          const m = _step4.value;\n          {\n            if ((M = s.signal) != null && M.aborted) break;\n            u += m;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n            await _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n      o(!1), c(u), setTimeout(() => {\n        r(!1), h() && a();\n      });\n    } else {\n      const u = Z(ee(p, n), f, g);\n      let m = \"\",\n        b = !1;\n      var _iteratorAbruptCompletion5 = false;\n      var _didIteratorError5 = false;\n      var _iteratorError5;\n      try {\n        for (var _iterator5 = _asyncIterator(u), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n          const E = _step5.value;\n          {\n            if ((y = s.signal) != null && y.aborted) break;\n            b || (o(!1), b = !0), m += E, l(m);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n            await _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n      d(), setTimeout(() => {\n        r(!1), h() && a();\n      });\n    }\n  },\n  se = 500,\n  oe = (i, e) => {\n    const {\n        messagesRef: t,\n        outputTypeRef: s,\n        onUserMessageRef: n,\n        onKeyDownRef: o,\n        errorMessageRef: r\n      } = i,\n      {\n        injectMessage: a,\n        simulateStreamMessage: c,\n        toggleTextAreaDisabled: l,\n        toggleIsBotTyping: d,\n        goToPath: h,\n        focusTextArea: p,\n        getIsChatBotVisible: f\n      } = e,\n      g = S(null),\n      M = A(y => {\n        var _u$tags;\n        if (!i.providerRef.current) return;\n        const u = y.data.message,\n          m = u.sender.toUpperCase();\n        u.tags = (_u$tags = u.tags) !== null && _u$tags !== void 0 ? _u$tags : [], u.tags.push(\"rcb-llm-connector-plugin:\".concat(m)), m === \"USER\" && (d(!0), l(!0), setTimeout(async () => {\n          var v;\n          if (n.current) {\n            const R = await n.current(u);\n            if (R) return (v = g.current) == null || v.abort(), g.current = null, h(R);\n          }\n          const b = i.historySizeRef.current,\n            E = t.current,\n            x = b ? [...E.slice(-(b - 1)), u] : [u],\n            C = new AbortController();\n          g.current = C, te(x, i, e, {\n            signal: C.signal\n          }).catch(R => {\n            d(!1), l(!1), setTimeout(() => {\n              f() && p();\n            }), console.error(\"LLM prompt failed\", R), s.current === \"full\" ? a(r.current) : c(r.current);\n          });\n        }, se));\n      }, [i, e]);\n    P(T.POST_INJECT_MESSAGE, M), P(T.STOP_SIMULATE_STREAM_MESSAGE, M), P(T.STOP_STREAM_MESSAGE, M), G(() => {\n      const y = async u => {\n        var m;\n        if (o.current) {\n          const b = await o.current(u);\n          b && ((m = g.current) == null || m.abort(), g.current = null, h(b));\n        }\n      };\n      return window.addEventListener(\"keydown\", y), () => window.removeEventListener(\"keydown\", y);\n    }, []);\n  },\n  re = i => {\n    const e = S([]),\n      t = S(null),\n      s = S(\"chunk\"),\n      n = S(30),\n      o = S(0),\n      r = S(\"\"),\n      a = S(\"Unable to get response, please try again.\"),\n      c = S(null),\n      l = S(null),\n      {\n        getFlow: d\n      } = L(),\n      {\n        speakAudio: h\n      } = z(),\n      {\n        messages: p,\n        injectMessage: f,\n        simulateStreamMessage: g,\n        streamMessage: M,\n        endStreamMessage: y\n      } = K(),\n      {\n        goToPath: u\n      } = N(),\n      {\n        toggleTextAreaDisabled: m,\n        focusTextArea: b\n      } = J(),\n      {\n        toggleIsBotTyping: E,\n        getIsChatBotVisible: x\n      } = H(),\n      C = _objectSpread(_objectSpread({}, Y), i !== null && i !== void 0 ? i : {});\n    G(() => {\n      e.current = p;\n    }, [p]), V(d, w => {\n      var _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14;\n      var k, B, U, F, I, D, W, _, $, j;\n      t.current = (_ref7 = (k = w.llmConnector) == null ? void 0 : k.provider) !== null && _ref7 !== void 0 ? _ref7 : null, s.current = (_ref8 = (B = w.llmConnector) == null ? void 0 : B.outputType) !== null && _ref8 !== void 0 ? _ref8 : \"chunk\", n.current = (_ref9 = (U = w.llmConnector) == null ? void 0 : U.outputSpeed) !== null && _ref9 !== void 0 ? _ref9 : 30, o.current = (_ref10 = (F = w.llmConnector) == null ? void 0 : F.historySize) !== null && _ref10 !== void 0 ? _ref10 : 0, r.current = (_ref11 = (I = w.llmConnector) == null ? void 0 : I.initialMessage) !== null && _ref11 !== void 0 ? _ref11 : \"\", a.current = (_ref12 = (D = w.llmConnector) == null ? void 0 : D.errorMessage) !== null && _ref12 !== void 0 ? _ref12 : \"Unable to get response, please try again.\", c.current = (_ref13 = (_ = (W = w.llmConnector) == null ? void 0 : W.stopConditions) == null ? void 0 : _.onUserMessage) !== null && _ref13 !== void 0 ? _ref13 : null, l.current = (_ref14 = (j = ($ = w.llmConnector) == null ? void 0 : $.stopConditions) == null ? void 0 : j.onKeyDown) !== null && _ref14 !== void 0 ? _ref14 : null;\n    });\n    const v = {\n        providerRef: t,\n        messagesRef: e,\n        outputTypeRef: s,\n        outputSpeedRef: n,\n        historySizeRef: o,\n        initialMessageRef: r,\n        errorMessageRef: a,\n        onUserMessageRef: c,\n        onKeyDownRef: l\n      },\n      R = {\n        speakAudio: h,\n        injectMessage: f,\n        simulateStreamMessage: g,\n        streamMessage: M,\n        endStreamMessage: y,\n        toggleTextAreaDisabled: m,\n        toggleIsBotTyping: E,\n        focusTextArea: b,\n        goToPath: u,\n        getIsChatBotVisible: x\n      };\n    q(v, R), oe(v, R);\n    const O = {\n      name: \"@rcb-plugins/llm-connector\"\n    };\n    return C != null && C.autoConfig && (O.settings = {\n      event: {\n        rcbChangePath: !0,\n        rcbPostInjectMessage: !0,\n        rcbStopSimulateStreamMessage: !0,\n        rcbStopStreamMessage: !0,\n        rcbPreProcessBlock: !0,\n        rcbPostProcessBlock: !0\n      }\n    }), O;\n  },\n  ie = i => () => re(i);\nclass ce {\n  /**\n   * Sets default values for the provider based on given configuration. Configuration guide here:\n   * https://github.com/React-ChatBotify-Plugins/llm-connector/blob/main/docs/providers/Gemini.md\n   *\n   * @param config configuration for setup\n   */\n  constructor(e) {\n    var _e$method, _e$body, _e$responseFormat, _e$debug, _e$baseUrl;\n    this.debug = !1, this.roleMap = s => {\n      switch (s) {\n        case \"USER\":\n          return \"user\";\n        default:\n          return \"model\";\n      }\n    }, this.constructBodyWithMessages = s => {\n      let n;\n      return this.messageParser ? n = this.messageParser(s) : n = s.filter(r => typeof r.content == \"string\" && r.sender.toUpperCase() !== \"SYSTEM\").map(r => {\n        const a = this.roleMap(r.sender.toUpperCase()),\n          c = r.content;\n        return {\n          role: a,\n          parts: [{\n            text: c\n          }]\n        };\n      }), this.systemMessage && (n = [{\n        role: \"user\",\n        parts: [{\n          text: this.systemMessage\n        }]\n      }, ...n]), _objectSpread({\n        contents: n\n      }, this.body);\n    }, this.handleStreamResponse = /*#__PURE__*/function () {\n      var _ref5 = _wrapAsyncGenerator(function* (s) {\n        var r, a, c, l, d;\n        const n = new TextDecoder(\"utf-8\");\n        let o = \"\";\n        for (;;) {\n          const {\n            value: h,\n            done: p\n          } = yield _awaitAsyncGenerator(s.read());\n          if (p) break;\n          o += n.decode(h, {\n            stream: !0\n          });\n          const f = o.split(\"\\n\");\n          o = f.pop();\n          for (const g of f) {\n            const M = g.trim();\n            if (!M.startsWith(\"data: \")) continue;\n            const y = M.slice(6);\n            try {\n              const m = (d = (l = (c = (a = (r = JSON.parse(y).candidates) == null ? void 0 : r[0]) == null ? void 0 : a.content) == null ? void 0 : c.parts) == null ? void 0 : l[0]) == null ? void 0 : d.text;\n              m && (yield m);\n            } catch (u) {\n              console.error(\"SSE JSON parse error:\", y, u);\n            }\n          }\n        }\n      });\n      return function (_x10) {\n        return _ref5.apply(this, arguments);\n      };\n    }(), this.method = (_e$method = e.method) !== null && _e$method !== void 0 ? _e$method : \"POST\", this.body = (_e$body = e.body) !== null && _e$body !== void 0 ? _e$body : {}, this.systemMessage = e.systemMessage, this.responseFormat = (_e$responseFormat = e.responseFormat) !== null && _e$responseFormat !== void 0 ? _e$responseFormat : \"stream\", this.messageParser = e.messageParser, this.debug = (_e$debug = e.debug) !== null && _e$debug !== void 0 ? _e$debug : !1, this.headers = _objectSpread({\n      \"Content-Type\": \"application/json\",\n      Accept: this.responseFormat === \"stream\" ? \"text/event-stream\" : \"application/json\"\n    }, e.headers);\n    const t = (_e$baseUrl = e.baseUrl) !== null && _e$baseUrl !== void 0 ? _e$baseUrl : \"https://generativelanguage.googleapis.com/v1beta\";\n    if (e.mode === \"direct\") this.endpoint = this.responseFormat === \"stream\" ? \"\".concat(t, \"/models/\").concat(e.model, \":streamGenerateContent?alt=sse&key=\").concat(e.apiKey || \"\") : \"\".concat(t, \"/models/\").concat(e.model, \":generateContent?key=\").concat(e.apiKey || \"\");else if (e.mode === \"proxy\") this.endpoint = \"\".concat(t, \"/\").concat(e.model);else throw Error(\"Invalid mode specified for Gemini provider ('direct' or 'proxy').\");\n  }\n  /**\n   * Calls Gemini and yields each chunk (or the full text).\n   *\n   * @param messages messages to include in the request\n   */\n  sendMessages(e) {\n    var _this = this;\n    return _wrapAsyncGenerator(function* () {\n      var s, n, o, r, a;\n      if (_this.debug) {\n        const c = _this.endpoint.replace(/\\?key=([^&]+)/, \"?key=[REDACTED]\"),\n          l = _objectSpread({}, _this.headers);\n        console.log(\"[GeminiProvider] Request:\", {\n          method: _this.method,\n          endpoint: c,\n          headers: l,\n          body: _this.constructBodyWithMessages(e)\n        });\n      }\n      const t = yield _awaitAsyncGenerator(fetch(_this.endpoint, {\n        method: _this.method,\n        headers: _this.headers,\n        body: JSON.stringify(_this.constructBodyWithMessages(e))\n      }));\n      if (_this.debug && console.log(\"[GeminiProvider] Response status:\", t.status), !t.ok) throw new Error(\"Gemini API error \".concat(t.status, \": \").concat(yield _awaitAsyncGenerator(t.text())));\n      if (_this.responseFormat === \"stream\") {\n        if (!t.body) throw new Error(\"Response body is empty – cannot stream\");\n        const c = t.body.getReader();\n        var _iteratorAbruptCompletion6 = false;\n        var _didIteratorError6 = false;\n        var _iteratorError6;\n        try {\n          for (var _iterator6 = _asyncIterator(_this.handleStreamResponse(c)), _step6; _iteratorAbruptCompletion6 = !(_step6 = yield _awaitAsyncGenerator(_iterator6.next())).done; _iteratorAbruptCompletion6 = false) {\n            const l = _step6.value;\n            {\n              yield l;\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n              yield _awaitAsyncGenerator(_iterator6.return());\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      } else {\n        const c = yield _awaitAsyncGenerator(t.json());\n        _this.debug && console.log(\"[GeminiProvider] Response body:\", c);\n        const l = (a = (r = (o = (n = (s = c.candidates) == null ? void 0 : s[0]) == null ? void 0 : n.content) == null ? void 0 : o.parts) == null ? void 0 : r[0]) == null ? void 0 : a.text;\n        if (typeof l == \"string\") yield l;else throw new Error(\"Unexpected response shape – no text candidate\");\n      }\n    })();\n  }\n}\nclass le {\n  /**\n   * Sets default values for the provider based on given configuration. Configuration guide here:\n   * https://github.com/React-ChatBotify-Plugins/llm-connector/blob/main/docs/providers/OpenAI.md\n   *\n   * @param config configuration for setup\n   */\n  constructor(e) {\n    var _e$method2, _e$baseUrl2, _e$responseFormat2, _e$debug2;\n    if (this.debug = !1, this.roleMap = t => {\n      switch (t) {\n        case \"USER\":\n          return \"user\";\n        case \"SYSTEM\":\n          return \"system\";\n        default:\n          return \"assistant\";\n      }\n    }, this.constructBodyWithMessages = t => {\n      let s;\n      return this.messageParser ? s = this.messageParser(t) : s = t.filter(o => typeof o.content == \"string\" && o.sender.toUpperCase() !== \"SYSTEM\").map(o => {\n        const r = this.roleMap(o.sender.toUpperCase()),\n          a = o.content;\n        return {\n          role: r,\n          content: a\n        };\n      }), this.systemMessage && (s = [{\n        role: \"system\",\n        content: this.systemMessage\n      }, ...s]), _objectSpread({\n        messages: s\n      }, this.body);\n    }, this.handleStreamResponse = /*#__PURE__*/function () {\n      var _ref6 = _wrapAsyncGenerator(function* (t) {\n        var o, r, a;\n        const s = new TextDecoder(\"utf-8\");\n        let n = \"\";\n        for (;;) {\n          const {\n            value: c,\n            done: l\n          } = yield _awaitAsyncGenerator(t.read());\n          if (l) break;\n          n += s.decode(c, {\n            stream: !0\n          });\n          const d = n.split(/\\r?\\n/);\n          n = d.pop();\n          for (const h of d) {\n            if (!h.startsWith(\"data: \")) continue;\n            const p = h.slice(6).trim();\n            if (p === \"[DONE]\") return;\n            try {\n              const g = (a = (r = (o = JSON.parse(p).choices) == null ? void 0 : o[0]) == null ? void 0 : r.delta) == null ? void 0 : a.content;\n              g && (yield g);\n            } catch (f) {\n              console.error(\"Stream parse error\", f);\n            }\n          }\n        }\n      });\n      return function (_x11) {\n        return _ref6.apply(this, arguments);\n      };\n    }(), this.method = (_e$method2 = e.method) !== null && _e$method2 !== void 0 ? _e$method2 : \"POST\", this.endpoint = (_e$baseUrl2 = e.baseUrl) !== null && _e$baseUrl2 !== void 0 ? _e$baseUrl2 : \"https://api.openai.com/v1/chat/completions\", this.systemMessage = e.systemMessage, this.responseFormat = (_e$responseFormat2 = e.responseFormat) !== null && _e$responseFormat2 !== void 0 ? _e$responseFormat2 : \"stream\", this.messageParser = e.messageParser, this.debug = (_e$debug2 = e.debug) !== null && _e$debug2 !== void 0 ? _e$debug2 : !1, this.headers = _objectSpread({\n      \"Content-Type\": \"application/json\",\n      Accept: this.responseFormat === \"stream\" ? \"text/event-stream\" : \"application/json\"\n    }, e.headers), this.body = _objectSpread({\n      model: e.model,\n      stream: this.responseFormat === \"stream\"\n    }, e.body), e.mode === \"direct\") {\n      this.headers = _objectSpread(_objectSpread({}, this.headers), {}, {\n        Authorization: \"Bearer \".concat(e.apiKey)\n      });\n      return;\n    }\n    if (e.mode !== \"proxy\") throw Error(\"Invalid mode specified for OpenAI provider ('direct' or 'proxy').\");\n  }\n  /**\n   * Calls Openai and yields each chunk (or the full text).\n   *\n   * @param messages messages to include in the request\n   */\n  sendMessages(e) {\n    var _this2 = this;\n    return _wrapAsyncGenerator(function* () {\n      var s, n, o;\n      if (_this2.debug) {\n        const r = _objectSpread({}, _this2.headers);\n        delete r.Authorization, console.log(\"[OpenaiProvider] Request:\", {\n          method: _this2.method,\n          endpoint: _this2.endpoint,\n          headers: r,\n          body: _this2.constructBodyWithMessages(e)\n        });\n      }\n      const t = yield _awaitAsyncGenerator(fetch(_this2.endpoint, {\n        method: _this2.method,\n        headers: _this2.headers,\n        body: JSON.stringify(_this2.constructBodyWithMessages(e))\n      }));\n      if (_this2.debug && console.log(\"[OpenaiProvider] Response status:\", t.status), !t.ok) throw new Error(\"Openai API error \".concat(t.status, \": \").concat(yield _awaitAsyncGenerator(t.text())));\n      if (_this2.responseFormat === \"stream\") {\n        if (!t.body) throw new Error(\"Response body is empty – cannot stream\");\n        const r = t.body.getReader();\n        var _iteratorAbruptCompletion7 = false;\n        var _didIteratorError7 = false;\n        var _iteratorError7;\n        try {\n          for (var _iterator7 = _asyncIterator(_this2.handleStreamResponse(r)), _step7; _iteratorAbruptCompletion7 = !(_step7 = yield _awaitAsyncGenerator(_iterator7.next())).done; _iteratorAbruptCompletion7 = false) {\n            const a = _step7.value;\n            {\n              yield a;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion7 && _iterator7.return != null) {\n              yield _awaitAsyncGenerator(_iterator7.return());\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n      } else {\n        const r = yield _awaitAsyncGenerator(t.json());\n        _this2.debug && console.log(\"[OpenaiProvider] Response body:\", r);\n        const a = (o = (n = (s = r.choices) == null ? void 0 : s[0]) == null ? void 0 : n.message) == null ? void 0 : o.content;\n        if (typeof a == \"string\") yield a;else throw new Error(\"Unexpected response shape – no text candidate\");\n      }\n    })();\n  }\n}\nclass de {\n  /**\n   * Sets default values for the provider based on given configuration. Configuration guide here:\n   * https://github.com/React-ChatBotify-Plugins/llm-connector/blob/main/docs/providers/WebLlm.md\n   *\n   * @param config configuration for setup\n   */\n  constructor(e) {\n    var _e$responseFormat3, _e$engineConfig, _e$chatCompletionOpti, _e$debug3;\n    this.debug = !1, this.roleMap = t => {\n      switch (t) {\n        case \"USER\":\n          return \"user\";\n        case \"SYSTEM\":\n          return \"system\";\n        default:\n          return \"assistant\";\n      }\n    }, this.constructBodyWithMessages = t => {\n      let s;\n      return this.messageParser ? s = this.messageParser(t) : s = t.filter(o => typeof o.content == \"string\" && o.sender.toUpperCase() !== \"SYSTEM\").map(o => {\n        const r = this.roleMap(o.sender.toUpperCase()),\n          a = o.content;\n        return {\n          role: r,\n          content: a\n        };\n      }), this.systemMessage && (s = [{\n        role: \"system\",\n        content: this.systemMessage\n      }, ...s]), _objectSpread({\n        messages: s,\n        stream: this.responseFormat === \"stream\"\n      }, this.chatCompletionOptions);\n    }, this.model = e.model, this.systemMessage = e.systemMessage, this.responseFormat = (_e$responseFormat3 = e.responseFormat) !== null && _e$responseFormat3 !== void 0 ? _e$responseFormat3 : \"stream\", this.messageParser = e.messageParser, this.engineConfig = (_e$engineConfig = e.engineConfig) !== null && _e$engineConfig !== void 0 ? _e$engineConfig : {}, this.chatCompletionOptions = (_e$chatCompletionOpti = e.chatCompletionOptions) !== null && _e$chatCompletionOpti !== void 0 ? _e$chatCompletionOpti : {}, this.debug = (_e$debug3 = e.debug) !== null && _e$debug3 !== void 0 ? _e$debug3 : !1, this.createEngine();\n  }\n  /**\n   * Creates MLC Engine for inferencing.\n   */\n  async createEngine() {\n    const {\n      CreateMLCEngine: e\n    } = await import(\"@mlc-ai/web-llm\");\n    this.engine = await e(this.model, _objectSpread({}, this.engineConfig));\n  }\n  /**\n   * Calls WebLlm and yields each chunk (or the full text).\n   *\n   * @param messages messages to include in the request\n   */\n  sendMessages(e) {\n    var _this3 = this;\n    return _wrapAsyncGenerator(function* () {\n      var s, n, o, r, a, c;\n      _this3.engine || (yield _awaitAsyncGenerator(_this3.createEngine())), _this3.debug && console.log(\"[WebLlmProvider] Request:\", {\n        model: _this3.model,\n        systemMessage: _this3.systemMessage,\n        responseFormat: _this3.responseFormat,\n        engineConfig: _this3.engineConfig,\n        chatCompletionOptions: _this3.chatCompletionOptions,\n        messages: _this3.constructBodyWithMessages(e).messages\n        // Log messages being sent\n      });\n      const t = yield _awaitAsyncGenerator((s = _this3.engine) == null ? void 0 : s.chat.completions.create(_this3.constructBodyWithMessages(e)));\n      if (_this3.debug && console.log(\"[WebLlmProvider] Response:\", t), t && Symbol.asyncIterator in t) {\n        var _iteratorAbruptCompletion8 = false;\n        var _didIteratorError8 = false;\n        var _iteratorError8;\n        try {\n          for (var _iterator8 = _asyncIterator(t), _step8; _iteratorAbruptCompletion8 = !(_step8 = yield _awaitAsyncGenerator(_iterator8.next())).done; _iteratorAbruptCompletion8 = false) {\n            const l = _step8.value;\n            {\n              const d = (o = (n = l.choices[0]) == null ? void 0 : n.delta) == null ? void 0 : o.content;\n              d && (yield d);\n            }\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion8 && _iterator8.return != null) {\n              yield _awaitAsyncGenerator(_iterator8.return());\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n      } else (c = (a = (r = t == null ? void 0 : t.choices) == null ? void 0 : r[0]) == null ? void 0 : a.message) != null && c.content && (yield t.choices[0].message.content);\n    })();\n  }\n}\nexport { ce as GeminiProvider, le as OpenaiProvider, de as WebLlmProvider, ie as default };","map":{"version":3,"names":["useCallback","A","useRef","S","useEffect","G","useOnRcbEvent","P","RcbEvent","T","useFlow","L","useAudio","z","useMessages","K","usePaths","N","useTextArea","J","useChatWindow","H","Y","autoConfig","V","i","e","t","s","o","data","nextPath","CHANGE_PATH","q","outputTypeRef","toggleTextAreaDisabled","toggleIsBotTyping","n","focusTextArea","injectMessage","r","simulateStreamMessage","a","getIsChatBotVisible","c","l","d","p","h","block","llmConnector","preventDefault","type","initialMessage","current","initialMessageRef","setTimeout","PRE_PROCESS_BLOCK","POST_PROCESS_BLOCK","Q","_ref","_wrapAsyncGenerator","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_asyncIterator","_step","_awaitAsyncGenerator","next","done","value","Promise","err","return","_x","_x2","apply","arguments","X","_ref2","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_x3","_x4","Z","_ref3","_asyncGeneratorDelegate","_x5","_x6","_x7","ee","_ref4","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_x8","_x9","te","length","undefined","M","y","providerRef","speakAudio","streamMessage","endStreamMessage","sendMessages","f","g","outputSpeedRef","u","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","m","signal","aborted","b","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","E","se","oe","messagesRef","onUserMessageRef","onKeyDownRef","errorMessageRef","goToPath","_u$tags","message","sender","toUpperCase","tags","push","concat","v","R","abort","historySizeRef","x","slice","C","AbortController","catch","console","error","POST_INJECT_MESSAGE","STOP_SIMULATE_STREAM_MESSAGE","STOP_STREAM_MESSAGE","window","addEventListener","removeEventListener","re","getFlow","messages","_objectSpread","w","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","k","B","U","F","I","D","W","_","$","j","provider","outputType","outputSpeed","historySize","errorMessage","stopConditions","onUserMessage","onKeyDown","O","name","settings","event","rcbChangePath","rcbPostInjectMessage","rcbStopSimulateStreamMessage","rcbStopStreamMessage","rcbPreProcessBlock","rcbPostProcessBlock","ie","ce","constructor","_e$method","_e$body","_e$responseFormat","_e$debug","_e$baseUrl","debug","roleMap","constructBodyWithMessages","messageParser","filter","content","map","role","parts","text","systemMessage","contents","body","handleStreamResponse","_ref5","TextDecoder","read","decode","stream","split","pop","trim","startsWith","JSON","parse","candidates","_x10","method","responseFormat","headers","Accept","baseUrl","mode","endpoint","model","apiKey","Error","_this","replace","log","fetch","stringify","status","ok","getReader","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","json","le","_e$method2","_e$baseUrl2","_e$responseFormat2","_e$debug2","_ref6","choices","delta","_x11","Authorization","_this2","_iteratorAbruptCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","de","_e$responseFormat3","_e$engineConfig","_e$chatCompletionOpti","_e$debug3","chatCompletionOptions","engineConfig","createEngine","CreateMLCEngine","engine","_this3","chat","completions","create","Symbol","asyncIterator","_iteratorAbruptCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","GeminiProvider","OpenaiProvider","WebLlmProvider","default"],"sources":["/home/runner/work/Geo-Expert/Geo-Expert/frontend/node_modules/@rcb-plugins/llm-connector/dist/index.js"],"sourcesContent":["import { useCallback as A, useRef as S, useEffect as G } from \"react\";\nimport { useOnRcbEvent as P, RcbEvent as T, useFlow as L, useAudio as z, useMessages as K, usePaths as N, useTextArea as J, useChatWindow as H } from \"react-chatbotify\";\nconst Y = {\n  autoConfig: !0\n}, V = (i, e) => {\n  const t = A(\n    (s) => {\n      const o = i()[s.data.nextPath];\n      e(o);\n    },\n    [i, e]\n  );\n  P(T.CHANGE_PATH, t);\n}, q = (i, e) => {\n  const { outputTypeRef: t } = i, {\n    toggleTextAreaDisabled: s,\n    toggleIsBotTyping: n,\n    focusTextArea: o,\n    injectMessage: r,\n    simulateStreamMessage: a,\n    getIsChatBotVisible: c\n  } = e, l = A(\n    (d) => {\n      var p;\n      const h = d.data.block;\n      h.llmConnector && (d.preventDefault(), d.type === \"rcb-pre-process-block\" && ((p = h.llmConnector) != null && p.initialMessage && (t.current === \"full\" ? r(i.initialMessageRef.current) : a(i.initialMessageRef.current)), n(!1), s(!1), setTimeout(() => {\n        c() && o();\n      })));\n    },\n    [n, s, o, c]\n  );\n  P(T.PRE_PROCESS_BLOCK, l), P(T.POST_PROCESS_BLOCK, l);\n}, Q = async function* (i, e) {\n  for await (const t of i)\n    for (const s of t)\n      yield s, await new Promise((n) => setTimeout(n, e));\n}, X = async function* (i, e) {\n  for await (const t of i)\n    yield t, await new Promise((s) => setTimeout(s, e));\n}, Z = async function* (i, e, t) {\n  e === \"character\" ? yield* Q(i, t) : yield* X(i, t);\n}, ee = async function* (i, e) {\n  for await (const t of i)\n    e(t), yield t;\n}, te = async (i, e, t, s = {}) => {\n  var M, y;\n  if (!e.providerRef.current)\n    return;\n  const {\n    speakAudio: n,\n    toggleIsBotTyping: o,\n    toggleTextAreaDisabled: r,\n    focusTextArea: a,\n    injectMessage: c,\n    streamMessage: l,\n    endStreamMessage: d,\n    getIsChatBotVisible: h\n  } = t, p = e.providerRef.current.sendMessages(i), f = e.outputTypeRef.current, g = e.outputSpeedRef.current;\n  if (f === \"full\") {\n    let u = \"\";\n    for await (const m of p) {\n      if ((M = s.signal) != null && M.aborted) break;\n      u += m;\n    }\n    o(!1), c(u), setTimeout(() => {\n      r(!1), h() && a();\n    });\n  } else {\n    const u = Z(ee(p, n), f, g);\n    let m = \"\", b = !1;\n    for await (const E of u) {\n      if ((y = s.signal) != null && y.aborted)\n        break;\n      b || (o(!1), b = !0), m += E, l(m);\n    }\n    d(), setTimeout(() => {\n      r(!1), h() && a();\n    });\n  }\n}, se = 500, oe = (i, e) => {\n  const { messagesRef: t, outputTypeRef: s, onUserMessageRef: n, onKeyDownRef: o, errorMessageRef: r } = i, {\n    injectMessage: a,\n    simulateStreamMessage: c,\n    toggleTextAreaDisabled: l,\n    toggleIsBotTyping: d,\n    goToPath: h,\n    focusTextArea: p,\n    getIsChatBotVisible: f\n  } = e, g = S(null), M = A(\n    (y) => {\n      if (!i.providerRef.current)\n        return;\n      const u = y.data.message, m = u.sender.toUpperCase();\n      u.tags = u.tags ?? [], u.tags.push(`rcb-llm-connector-plugin:${m}`), m === \"USER\" && (d(!0), l(!0), setTimeout(async () => {\n        var v;\n        if (n.current) {\n          const R = await n.current(u);\n          if (R)\n            return (v = g.current) == null || v.abort(), g.current = null, h(R);\n        }\n        const b = i.historySizeRef.current, E = t.current, x = b ? [...E.slice(-(b - 1)), u] : [u], C = new AbortController();\n        g.current = C, te(x, i, e, { signal: C.signal }).catch((R) => {\n          d(!1), l(!1), setTimeout(() => {\n            f() && p();\n          }), console.error(\"LLM prompt failed\", R), s.current === \"full\" ? a(r.current) : c(r.current);\n        });\n      }, se));\n    },\n    [i, e]\n  );\n  P(T.POST_INJECT_MESSAGE, M), P(T.STOP_SIMULATE_STREAM_MESSAGE, M), P(T.STOP_STREAM_MESSAGE, M), G(() => {\n    const y = async (u) => {\n      var m;\n      if (o.current) {\n        const b = await o.current(u);\n        b && ((m = g.current) == null || m.abort(), g.current = null, h(b));\n      }\n    };\n    return window.addEventListener(\"keydown\", y), () => window.removeEventListener(\"keydown\", y);\n  }, []);\n}, re = (i) => {\n  const e = S([]), t = S(null), s = S(\"chunk\"), n = S(30), o = S(0), r = S(\"\"), a = S(\"Unable to get response, please try again.\"), c = S(null), l = S(null), { getFlow: d } = L(), { speakAudio: h } = z(), { messages: p, injectMessage: f, simulateStreamMessage: g, streamMessage: M, endStreamMessage: y } = K(), { goToPath: u } = N(), { toggleTextAreaDisabled: m, focusTextArea: b } = J(), { toggleIsBotTyping: E, getIsChatBotVisible: x } = H(), C = { ...Y, ...i ?? {} };\n  G(() => {\n    e.current = p;\n  }, [p]), V(d, (w) => {\n    var k, B, U, F, I, D, W, _, $, j;\n    t.current = ((k = w.llmConnector) == null ? void 0 : k.provider) ?? null, s.current = ((B = w.llmConnector) == null ? void 0 : B.outputType) ?? \"chunk\", n.current = ((U = w.llmConnector) == null ? void 0 : U.outputSpeed) ?? 30, o.current = ((F = w.llmConnector) == null ? void 0 : F.historySize) ?? 0, r.current = ((I = w.llmConnector) == null ? void 0 : I.initialMessage) ?? \"\", a.current = ((D = w.llmConnector) == null ? void 0 : D.errorMessage) ?? \"Unable to get response, please try again.\", c.current = ((_ = (W = w.llmConnector) == null ? void 0 : W.stopConditions) == null ? void 0 : _.onUserMessage) ?? null, l.current = ((j = ($ = w.llmConnector) == null ? void 0 : $.stopConditions) == null ? void 0 : j.onKeyDown) ?? null;\n  });\n  const v = {\n    providerRef: t,\n    messagesRef: e,\n    outputTypeRef: s,\n    outputSpeedRef: n,\n    historySizeRef: o,\n    initialMessageRef: r,\n    errorMessageRef: a,\n    onUserMessageRef: c,\n    onKeyDownRef: l\n  }, R = {\n    speakAudio: h,\n    injectMessage: f,\n    simulateStreamMessage: g,\n    streamMessage: M,\n    endStreamMessage: y,\n    toggleTextAreaDisabled: m,\n    toggleIsBotTyping: E,\n    focusTextArea: b,\n    goToPath: u,\n    getIsChatBotVisible: x\n  };\n  q(v, R), oe(v, R);\n  const O = { name: \"@rcb-plugins/llm-connector\" };\n  return C != null && C.autoConfig && (O.settings = {\n    event: {\n      rcbChangePath: !0,\n      rcbPostInjectMessage: !0,\n      rcbStopSimulateStreamMessage: !0,\n      rcbStopStreamMessage: !0,\n      rcbPreProcessBlock: !0,\n      rcbPostProcessBlock: !0\n    }\n  }), O;\n}, ie = (i) => () => re(i);\nclass ce {\n  /**\n   * Sets default values for the provider based on given configuration. Configuration guide here:\n   * https://github.com/React-ChatBotify-Plugins/llm-connector/blob/main/docs/providers/Gemini.md\n   *\n   * @param config configuration for setup\n   */\n  constructor(e) {\n    this.debug = !1, this.roleMap = (s) => {\n      switch (s) {\n        case \"USER\":\n          return \"user\";\n        default:\n          return \"model\";\n      }\n    }, this.constructBodyWithMessages = (s) => {\n      let n;\n      return this.messageParser ? n = this.messageParser(s) : n = s.filter(\n        (r) => typeof r.content == \"string\" && r.sender.toUpperCase() !== \"SYSTEM\"\n      ).map((r) => {\n        const a = this.roleMap(r.sender.toUpperCase()), c = r.content;\n        return {\n          role: a,\n          parts: [{ text: c }]\n        };\n      }), this.systemMessage && (n = [{ role: \"user\", parts: [{ text: this.systemMessage }] }, ...n]), {\n        contents: n,\n        ...this.body\n      };\n    }, this.handleStreamResponse = async function* (s) {\n      var r, a, c, l, d;\n      const n = new TextDecoder(\"utf-8\");\n      let o = \"\";\n      for (; ; ) {\n        const { value: h, done: p } = await s.read();\n        if (p) break;\n        o += n.decode(h, { stream: !0 });\n        const f = o.split(`\n`);\n        o = f.pop();\n        for (const g of f) {\n          const M = g.trim();\n          if (!M.startsWith(\"data: \")) continue;\n          const y = M.slice(6);\n          try {\n            const m = (d = (l = (c = (a = (r = JSON.parse(y).candidates) == null ? void 0 : r[0]) == null ? void 0 : a.content) == null ? void 0 : c.parts) == null ? void 0 : l[0]) == null ? void 0 : d.text;\n            m && (yield m);\n          } catch (u) {\n            console.error(\"SSE JSON parse error:\", y, u);\n          }\n        }\n      }\n    }, this.method = e.method ?? \"POST\", this.body = e.body ?? {}, this.systemMessage = e.systemMessage, this.responseFormat = e.responseFormat ?? \"stream\", this.messageParser = e.messageParser, this.debug = e.debug ?? !1, this.headers = {\n      \"Content-Type\": \"application/json\",\n      Accept: this.responseFormat === \"stream\" ? \"text/event-stream\" : \"application/json\",\n      ...e.headers\n    };\n    const t = e.baseUrl ?? \"https://generativelanguage.googleapis.com/v1beta\";\n    if (e.mode === \"direct\")\n      this.endpoint = this.responseFormat === \"stream\" ? `${t}/models/${e.model}:streamGenerateContent?alt=sse&key=${e.apiKey || \"\"}` : `${t}/models/${e.model}:generateContent?key=${e.apiKey || \"\"}`;\n    else if (e.mode === \"proxy\")\n      this.endpoint = `${t}/${e.model}`;\n    else\n      throw Error(\"Invalid mode specified for Gemini provider ('direct' or 'proxy').\");\n  }\n  /**\n   * Calls Gemini and yields each chunk (or the full text).\n   *\n   * @param messages messages to include in the request\n   */\n  async *sendMessages(e) {\n    var s, n, o, r, a;\n    if (this.debug) {\n      const c = this.endpoint.replace(/\\?key=([^&]+)/, \"?key=[REDACTED]\"), l = { ...this.headers };\n      console.log(\"[GeminiProvider] Request:\", {\n        method: this.method,\n        endpoint: c,\n        headers: l,\n        body: this.constructBodyWithMessages(e)\n      });\n    }\n    const t = await fetch(this.endpoint, {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.constructBodyWithMessages(e))\n    });\n    if (this.debug && console.log(\"[GeminiProvider] Response status:\", t.status), !t.ok)\n      throw new Error(`Gemini API error ${t.status}: ${await t.text()}`);\n    if (this.responseFormat === \"stream\") {\n      if (!t.body)\n        throw new Error(\"Response body is empty – cannot stream\");\n      const c = t.body.getReader();\n      for await (const l of this.handleStreamResponse(c))\n        yield l;\n    } else {\n      const c = await t.json();\n      this.debug && console.log(\"[GeminiProvider] Response body:\", c);\n      const l = (a = (r = (o = (n = (s = c.candidates) == null ? void 0 : s[0]) == null ? void 0 : n.content) == null ? void 0 : o.parts) == null ? void 0 : r[0]) == null ? void 0 : a.text;\n      if (typeof l == \"string\")\n        yield l;\n      else\n        throw new Error(\"Unexpected response shape – no text candidate\");\n    }\n  }\n}\nclass le {\n  /**\n   * Sets default values for the provider based on given configuration. Configuration guide here:\n   * https://github.com/React-ChatBotify-Plugins/llm-connector/blob/main/docs/providers/OpenAI.md\n   *\n   * @param config configuration for setup\n   */\n  constructor(e) {\n    if (this.debug = !1, this.roleMap = (t) => {\n      switch (t) {\n        case \"USER\":\n          return \"user\";\n        case \"SYSTEM\":\n          return \"system\";\n        default:\n          return \"assistant\";\n      }\n    }, this.constructBodyWithMessages = (t) => {\n      let s;\n      return this.messageParser ? s = this.messageParser(t) : s = t.filter(\n        (o) => typeof o.content == \"string\" && o.sender.toUpperCase() !== \"SYSTEM\"\n      ).map((o) => {\n        const r = this.roleMap(o.sender.toUpperCase()), a = o.content;\n        return {\n          role: r,\n          content: a\n        };\n      }), this.systemMessage && (s = [{ role: \"system\", content: this.systemMessage }, ...s]), {\n        messages: s,\n        ...this.body\n      };\n    }, this.handleStreamResponse = async function* (t) {\n      var o, r, a;\n      const s = new TextDecoder(\"utf-8\");\n      let n = \"\";\n      for (; ; ) {\n        const { value: c, done: l } = await t.read();\n        if (l) break;\n        n += s.decode(c, { stream: !0 });\n        const d = n.split(/\\r?\\n/);\n        n = d.pop();\n        for (const h of d) {\n          if (!h.startsWith(\"data: \")) continue;\n          const p = h.slice(6).trim();\n          if (p === \"[DONE]\") return;\n          try {\n            const g = (a = (r = (o = JSON.parse(p).choices) == null ? void 0 : o[0]) == null ? void 0 : r.delta) == null ? void 0 : a.content;\n            g && (yield g);\n          } catch (f) {\n            console.error(\"Stream parse error\", f);\n          }\n        }\n      }\n    }, this.method = e.method ?? \"POST\", this.endpoint = e.baseUrl ?? \"https://api.openai.com/v1/chat/completions\", this.systemMessage = e.systemMessage, this.responseFormat = e.responseFormat ?? \"stream\", this.messageParser = e.messageParser, this.debug = e.debug ?? !1, this.headers = {\n      \"Content-Type\": \"application/json\",\n      Accept: this.responseFormat === \"stream\" ? \"text/event-stream\" : \"application/json\",\n      ...e.headers\n    }, this.body = {\n      model: e.model,\n      stream: this.responseFormat === \"stream\",\n      ...e.body\n    }, e.mode === \"direct\") {\n      this.headers = { ...this.headers, Authorization: `Bearer ${e.apiKey}` };\n      return;\n    }\n    if (e.mode !== \"proxy\")\n      throw Error(\"Invalid mode specified for OpenAI provider ('direct' or 'proxy').\");\n  }\n  /**\n   * Calls Openai and yields each chunk (or the full text).\n   *\n   * @param messages messages to include in the request\n   */\n  async *sendMessages(e) {\n    var s, n, o;\n    if (this.debug) {\n      const r = { ...this.headers };\n      delete r.Authorization, console.log(\"[OpenaiProvider] Request:\", {\n        method: this.method,\n        endpoint: this.endpoint,\n        headers: r,\n        body: this.constructBodyWithMessages(e)\n      });\n    }\n    const t = await fetch(this.endpoint, {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.constructBodyWithMessages(e))\n    });\n    if (this.debug && console.log(\"[OpenaiProvider] Response status:\", t.status), !t.ok)\n      throw new Error(`Openai API error ${t.status}: ${await t.text()}`);\n    if (this.responseFormat === \"stream\") {\n      if (!t.body)\n        throw new Error(\"Response body is empty – cannot stream\");\n      const r = t.body.getReader();\n      for await (const a of this.handleStreamResponse(r))\n        yield a;\n    } else {\n      const r = await t.json();\n      this.debug && console.log(\"[OpenaiProvider] Response body:\", r);\n      const a = (o = (n = (s = r.choices) == null ? void 0 : s[0]) == null ? void 0 : n.message) == null ? void 0 : o.content;\n      if (typeof a == \"string\")\n        yield a;\n      else\n        throw new Error(\"Unexpected response shape – no text candidate\");\n    }\n  }\n}\nclass de {\n  /**\n   * Sets default values for the provider based on given configuration. Configuration guide here:\n   * https://github.com/React-ChatBotify-Plugins/llm-connector/blob/main/docs/providers/WebLlm.md\n   *\n   * @param config configuration for setup\n   */\n  constructor(e) {\n    this.debug = !1, this.roleMap = (t) => {\n      switch (t) {\n        case \"USER\":\n          return \"user\";\n        case \"SYSTEM\":\n          return \"system\";\n        default:\n          return \"assistant\";\n      }\n    }, this.constructBodyWithMessages = (t) => {\n      let s;\n      return this.messageParser ? s = this.messageParser(t) : s = t.filter(\n        (o) => typeof o.content == \"string\" && o.sender.toUpperCase() !== \"SYSTEM\"\n      ).map((o) => {\n        const r = this.roleMap(o.sender.toUpperCase()), a = o.content;\n        return {\n          role: r,\n          content: a\n        };\n      }), this.systemMessage && (s = [\n        {\n          role: \"system\",\n          content: this.systemMessage\n        },\n        ...s\n      ]), {\n        messages: s,\n        stream: this.responseFormat === \"stream\",\n        ...this.chatCompletionOptions\n      };\n    }, this.model = e.model, this.systemMessage = e.systemMessage, this.responseFormat = e.responseFormat ?? \"stream\", this.messageParser = e.messageParser, this.engineConfig = e.engineConfig ?? {}, this.chatCompletionOptions = e.chatCompletionOptions ?? {}, this.debug = e.debug ?? !1, this.createEngine();\n  }\n  /**\n   * Creates MLC Engine for inferencing.\n   */\n  async createEngine() {\n    const { CreateMLCEngine: e } = await import(\"@mlc-ai/web-llm\");\n    this.engine = await e(this.model, {\n      ...this.engineConfig\n    });\n  }\n  /**\n   * Calls WebLlm and yields each chunk (or the full text).\n   *\n   * @param messages messages to include in the request\n   */\n  async *sendMessages(e) {\n    var s, n, o, r, a, c;\n    this.engine || await this.createEngine(), this.debug && console.log(\"[WebLlmProvider] Request:\", {\n      model: this.model,\n      systemMessage: this.systemMessage,\n      responseFormat: this.responseFormat,\n      engineConfig: this.engineConfig,\n      chatCompletionOptions: this.chatCompletionOptions,\n      messages: this.constructBodyWithMessages(e).messages\n      // Log messages being sent\n    });\n    const t = await ((s = this.engine) == null ? void 0 : s.chat.completions.create(this.constructBodyWithMessages(e)));\n    if (this.debug && console.log(\"[WebLlmProvider] Response:\", t), t && Symbol.asyncIterator in t)\n      for await (const l of t) {\n        const d = (o = (n = l.choices[0]) == null ? void 0 : n.delta) == null ? void 0 : o.content;\n        d && (yield d);\n      }\n    else (c = (a = (r = t == null ? void 0 : t.choices) == null ? void 0 : r[0]) == null ? void 0 : a.message) != null && c.content && (yield t.choices[0].message.content);\n  }\n}\nexport {\n  ce as GeminiProvider,\n  le as OpenaiProvider,\n  de as WebLlmProvider,\n  ie as default\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}